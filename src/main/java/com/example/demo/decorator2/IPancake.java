package com.example.demo.decorator2;

/**
 * 定义一个煎饼接口
 */
public interface IPancake {
    /**
     * 定义烹饪的操作
     */
    void cook();
}
/**
 * 1. 适用场景

 扩展一个类的功能。
 动态添加功能，动态撤销。

 2. 优点

 装饰类和被装饰类都只关心自身的核心业务，实现了解耦。
 方便动态的扩展功能，且提供了比继承更多的灵活性。

 3. 缺点

 如果功能扩展过多，势必产生大量的类。
 多层装饰比较复杂。
 */
